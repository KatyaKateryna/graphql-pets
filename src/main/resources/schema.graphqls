schema {
    query: Query

    mutation: Mutation
}

type Query {
    cat(id: UUID!): Cat

    pet(id: UUID!): Pet
}

type Mutation {
    createCat(cat: CatInput!): Cat!
}

interface Pet {
    id: UUID!
    name: String!
}

type Cat implements Pet {
    id: UUID!
    name: String!
    colors: [Color!]!
    passport(fastLoad: Boolean = false): Passport
}

type Dog implements Pet {
    id: UUID!
    name: String!
    breed: String
}

union Passport = InternalPassport | InternationalPassport

type InternalPassport {
    birthDate: Date!
}

type InternationalPassport {
    vaccinationDate: Date!
}

input CatInput {
    name: String!
    colors: [Color!]
}

enum Color {
    BLACK
    WHITE
    RED
    GRAY @deprecated(reason: "We don't accept gray cats anymore")
    BROWN
}

scalar Date
scalar UUID